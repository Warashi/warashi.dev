<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>404 やる気 Not Found</title><link>https://warashi.dev/</link><description>Recent content on 404 やる気 Not Found</description><generator>Hugo</generator><language>ja-JP</language><copyright>© 2024 Copyright warashi</copyright><lastBuildDate>Fri, 02 Aug 2024 20:45:00 +0900</lastBuildDate><atom:link href="https://warashi.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>ox-hugoとnixでブログをビルドする</title><link>https://warashi.dev/posts/d979a10f-58e7-40d0-b86e-a52dd8b096ba/</link><pubDate>Fri, 02 Aug 2024 20:45:00 +0900</pubDate><guid>https://warashi.dev/posts/d979a10f-58e7-40d0-b86e-a52dd8b096ba/</guid><description>&lt;h2 id="この記事で扱う大きなトピック">この記事で扱う大きなトピック&lt;/h2>
&lt;h3 id="emacs-org-mode-および-ox-hugo">Emacs org-mode および ox-hugo&lt;/h3>
&lt;p>皆さんご存知の Emacs には org-mode というツール？が備わっています。&lt;br>
org-mode は markdown などのマークアップ言語の一種である org という形式を扱うものです。この org-mode は Emacs の機能や拡張によって様々な形式で出力することができ、 ox-hugo という拡張を使うと Hugo という静的サイト生成のツールに適した出力ができます。この記事では、その org-mode および ox-hugo を使ってブログサイトを構築する一つの方法を紹介します。&lt;/p></description></item><item><title>Go Commits in This Week at 2022-05-21</title><link>https://warashi.dev/posts/dc6303e6-1bc4-4f4c-9b8a-779d299ad156/</link><pubDate>Mon, 23 May 2022 07:29:53 +0900</pubDate><guid>https://warashi.dev/posts/dc6303e6-1bc4-4f4c-9b8a-779d299ad156/</guid><description>&lt;h2 id="time-add-time-dot-zonebounds-golang-go-41b9d8c">&lt;a href="https://github.com/golang/go/commit/41b9d8c75e45636a153c2a31d117196a22a7fc6c">time: add Time.ZoneBounds ? golang/go@41b9d8c&lt;/a>&lt;/h2>
&lt;p>&lt;code>time.ZoneBounds&lt;/code> という関数が追加されるようです。テストコードも見たんですが、何をするための関数なのかよくわかりませんでした…。&lt;/p>
&lt;h2 id="net-http-allow-sending-1xx-responses-golang-go-770e0e5">&lt;a href="https://github.com/golang/go/commit/770e0e584a98dfd5e8d0d00558085c339fda0ed7">net/http: allow sending 1xx responses ? golang/go@770e0e5&lt;/a>&lt;/h2>
&lt;p>net/http で 1xx 系のレスポンスを返せるようにする変更です。今までは返せなかったことにちょっと驚きました。&lt;/p></description></item><item><title>Go Commits in This Week at 2022-05-14</title><link>https://warashi.dev/posts/dda38367-165d-4061-85ac-f2e6b3227249/</link><pubDate>Sat, 14 May 2022 10:45:03 +0900</pubDate><guid>https://warashi.dev/posts/dda38367-165d-4061-85ac-f2e6b3227249/</guid><description>&lt;h2 id="math-big-don-t-force-second-arg-to-jacobi-and-int-dot-modsqrt-to-escape-golang-go-831f116">&lt;a href="https://github.com/golang/go/commit/831f1168289e65a7ef49942ad8d16cf14af2ef43">math/big: don&amp;rsquo;t force second arg to Jacobi and Int.ModSqrt to escape · golang/go@831f116&lt;/a>&lt;/h2>
&lt;p>Goはコンパイル時のエスケープ解析で変数のアロケート場所がスタックとヒープに決まります。このコミットはほんのちょっとの変更でスタックにアロケートできたという変更です。普段僕たちが書く時はここまでカリカリのチューニングをする前にもうちょっと他の改善がありそうですが、もし必要になったときは参考にできそうですね。&lt;/p></description></item><item><title>Go Commits in This Week at 2022-05-07</title><link>https://warashi.dev/posts/78620327-d47a-46bd-b0b6-dd313dcedeaf/</link><pubDate>Sat, 07 May 2022 08:10:50 +0900</pubDate><guid>https://warashi.dev/posts/78620327-d47a-46bd-b0b6-dd313dcedeaf/</guid><description>&lt;p>&lt;a href="https://github.com/golang/go">https://github.com/golang/go&lt;/a> に今週あったコミットのうち、僕の目にとまったもをの書いていきます。&lt;/p>
&lt;h2 id="os-exec-return-error-when-path-lookup-would-use-current-directory-golang-go-349cc83-github">&lt;a href="https://github.com/golang/go/commit/349cc83389f71c459b7820b0deecdf81221ba46c">os/exec: return error when PATH lookup would use current directory · golang/go@349cc83 · GitHub&lt;/a>&lt;/h2>
&lt;p>先週リバートされていたもののリトライのようです。リバートの原因は x/sys/execabs のテストが壊れたからでしたが、対策をしたとのことでした。&lt;/p></description></item><item><title>Go Commits in this Week at 2022-04-30</title><link>https://warashi.dev/posts/f04043e4-a05b-4f5f-90a2-fe05e6f8e395/</link><pubDate>Sat, 30 Apr 2022 11:43:23 +0900</pubDate><guid>https://warashi.dev/posts/f04043e4-a05b-4f5f-90a2-fe05e6f8e395/</guid><description>&lt;p>&lt;a href="https://github.com/golang/go">https://github.com/golang/go&lt;/a> に今週あったコミットのうち、僕の目にとまったもをの書いていきます。&lt;/p>
&lt;h2 id="slices-use-less-instead-of-greaterorequal">&lt;a href="https://github.com/golang/go/commit/415e3fd8a6e62d7e9cf7d0c995518179dc0b7723">slices: use !{{Less}} instead of {{GreaterOrEqual}}&lt;/a>&lt;/h2>
&lt;p>sortで &lt;code>a&lt;/code> と &lt;code>b&lt;/code> を比較する際に &lt;code>a &amp;gt;= b&lt;/code> を使うか &lt;code>!(a &amp;lt; b)&lt;/code> を使うかによって結果が変わってしまうから元に戻すよ、ということのようです。この2つは一見同じように見えるのですが、浮動小数点数で &lt;code>NaN&lt;/code> が混じっているときに同じ結果ではなくなります。&lt;/p></description></item><item><title>Signed HTTP Exchanges (SXG) と Accelerated Mobile Pages (AMP)</title><link>https://warashi.dev/posts/a1f6a656-dea7-42e4-8355-d9fc056c7ccf/</link><pubDate>Sat, 16 Mar 2019 11:33:29 +0900</pubDate><guid>https://warashi.dev/posts/a1f6a656-dea7-42e4-8355-d9fc056c7ccf/</guid><description>&lt;p>まだDraftなんですが、 Signed HTTP Exchanges という規格があります。規格そのものについて詳しくはJxckさんのブログ記事 &lt;a href="https://blog.jxck.io/entries/2018-12-01/signed-http-exchanges.html">WebPackaging の Signed HTTP Exchanges&lt;/a> を参照してもらえるといいと思います。&lt;/p></description></item><item><title>warashi.dev</title><link>https://warashi.dev/posts/0d3499d9-e8c5-43a0-92ec-1824c7a1ec8b/</link><pubDate>Fri, 01 Mar 2019 21:03:15 +0900</pubDate><guid>https://warashi.dev/posts/0d3499d9-e8c5-43a0-92ec-1824c7a1ec8b/</guid><description>&lt;p>なんとなく &lt;code>.dev&lt;/code> ドメインが話題になっていたので、独自ドメインを取得しました。&lt;br>
&lt;code>warashi.dev&lt;/code> です。このサイトも &lt;a href="https://warashi.dev">https://warashi.dev&lt;/a> になりました。&lt;br>
Google Domains で取得したんですが、Github Pagesで独自ドメインを設定する時に、ALIASとかANAMEとかいうのにGoogle Domainsが対応してなくて、仕方なくAレコードを設定しました。&lt;br>
Aレコードを設定する方法だと、Github PagesのIPアドレスが変わるたびに設定をやり直さなきゃいけないので大変なんですよね。ANAME対応してくれないかなぁ。&lt;/p></description></item><item><title>GitOps</title><link>https://warashi.dev/posts/59aefada-6c0f-4f2d-b6ae-8fbf3dcfd73d/</link><pubDate>Sun, 24 Feb 2019 14:24:46 +0900</pubDate><guid>https://warashi.dev/posts/59aefada-6c0f-4f2d-b6ae-8fbf3dcfd73d/</guid><description>&lt;p>このブログ更新するのすごい久しぶりだ…… &amp;#x1f914;&lt;/p>
&lt;p>GitOpsというやつを知って、やってみたいなって思ったんですね。で、GitHub Pagesって特定のbranchの中身が常に反映されるわけじゃないですか。これはGitOpsにぴったりなのでは！と思ってこのブログをGitOpsっぽくしました。&lt;/p></description></item><item><title>CircleCI 2.0</title><link>https://warashi.dev/posts/098a5a46-6607-4240-86ce-75078f2bece8/</link><pubDate>Wed, 29 Nov 2017 18:57:20 +0900</pubDate><guid>https://warashi.dev/posts/098a5a46-6607-4240-86ce-75078f2bece8/</guid><description>&lt;p>このブログのHTML生成にはCircleCIでHugoを動かしているんですが、今までCircleCIのバージョン1を使っていたのをバージョン2に移行しました。移行のためにDockerコンテナを作るところから始める、というちょっと面倒な事態になりましたが、なんとか移行完了したのでちょっと記事書くかなって感じです。&lt;/p></description></item><item><title>「そうだ Go、京都。」参加告報</title><link>https://warashi.dev/posts/0ee66a0d-098a-4928-b53e-29e30aa91104/</link><pubDate>Sat, 29 Apr 2017 20:15:58 +0900</pubDate><guid>https://warashi.dev/posts/0ee66a0d-098a-4928-b53e-29e30aa91104/</guid><description>&lt;p>本日、はてなさんで開かれた Go の勉強会に参加してきましたので、備忘録も兼ねて内容をメモしておこうと思います。&lt;/p>
&lt;h2 id="ltじゃないやつ">LTじゃないやつ&lt;/h2>
&lt;h3 id="string-random-の-go-版を作った話--by-tさん">String::Random の Go 版を作った話 (by &lt;a href="//twitter.com/t_snz">tさん&lt;/a>)&lt;/h3>
&lt;p>&lt;a href="//blog.yux3.net/entry/2017/05/01/014200">ご本人の解説記事&lt;/a>&lt;/p>
&lt;p>&lt;a href="//metacpan.org/pod/String%3A%3ARandom">String::Random&lt;/a> という Perl のモジュールがあって、それを Go に移植したという話でした。実装はこちら (&lt;a href="//github.com/t-mrt/gocha">gocha&lt;/a>)&lt;/p></description></item><item><title>ブログはじめました</title><link>https://warashi.dev/posts/2b642e78-f28c-4563-9e75-45559201eb5c/</link><pubDate>Sat, 22 Apr 2017 09:03:51 +0900</pubDate><guid>https://warashi.dev/posts/2b642e78-f28c-4563-9e75-45559201eb5c/</guid><description>&lt;p>&lt;a href="//gohugo.io">Hugo&lt;/a> を使ってブログを始めました。ブログの生成元ファイル群は&lt;a href="//github.com/Warashi/warashi.github.io">ここ&lt;/a>にあります。&lt;br>
&lt;a href="//circleci.com">Circle CI&lt;/a> を使って1リポジトリの複数ブランチでソースと生成結果を管理してます。よかったら参考にどうぞ。&lt;/p></description></item><item><title>about Warashi</title><link>https://warashi.dev/about/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0900</pubDate><guid>https://warashi.dev/about/</guid><description>&lt;p>ざしきわらし。名前の由来は大学時代にサークルのBOXに居座りすぎてまるでざしきわらしのようだと言われたことから。そのせいで留年を重ねたのはいい思い出。留年も悪くないよ。&lt;/p></description></item></channel></rss>